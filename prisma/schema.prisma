generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String      @id @default(cuid())
  email        String   @unique
  username     String   @unique
  password     String
  name         String
  image        String?
  bio          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  posts        Post[]
  postLikes    PostLike[]
  comments     Comment[]
  commentLikes CommentLike[]
  favorites    FavoritePost[]
  following    Follow[] @relation("Following")
  followers    Follow[] @relation("Followers")
}


model Post {
  id           String      @id @default(cuid())
  image        String
  caption      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String    
  postLikes    PostLike[]
  favoritedBy  FavoritePost[]
  comments     Comment[]
}

model PostLike {
  id         String      @id @default(cuid())
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String     
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model FavoritePost {
  id         String      @id @default(cuid())
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String      
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Comment {
  id         String      @id @default(cuid())
  text       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String     
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String        
  commentLikes CommentLike[]
}

model CommentLike {
  id         String     @id @default(cuid())
  comment    Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String     
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Follow {
  id           String     @id @default(cuid()) 
  follower     User       @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId   String     
  following    User       @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)   
  followingId  String      
  createdAt    DateTime   @default(now())
}